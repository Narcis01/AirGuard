{
	"info": {
		"_postman_id": "8a50575e-b097-4658-903f-1854044e1fce",
		"name": "AirGuard",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20877364"
	},
	"item": [
		{
			"name": "DATA",
			"item": [
				{
					"name": "GET DATA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"   pm.response.to.have.status(200); ",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(\"Expect response to be an array\", () => {",
									"    pm.expect(response.message).to.be.an(\"array\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/data",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"data"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST DATA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => {",
									"   pm.response.to.have.status(200) ",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.globals.set(\"data_id\", response.data._id);",
									"",
									"pm.test(\"Returned object to be the same\", () => {",
									"    pm.expect(response.data.temperature).to.equal(23)",
									"    pm.expect(response.data.co2).to.equal(0.42)",
									"    pm.expect(response.data.humidity).to.equal(70)",
									"    pm.expect(response.data.light).to.equal(2.5)",
									"    pm.expect(response.data.dust).to.equal(0.64)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1MzUzMWI0ZGQ4ZDliNDI5MGQ1ZmRmNCIsImlhdCI6MTY5ODIzNDI3MSwiZXhwIjoxNjk4NDA3MDcxfQ.g60eLx6SqNX0s6GeKWG64Af_BiXarE3WgJGm19RgLeY",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"temperature\": 23,\n\t\"co2\": 0.42,\n\t\"humidity\": 70,\n\t\"dust\": 0.64,\n\t\"light\": 2.5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/post",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE DATA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Expect status 200\", () => {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(\"Check if the object is updated\", () => {",
									"    pm.expect(response.data.temperature).to.equal(100)",
									"    pm.expect(response.data.co2).to.equal(34)",
									"    pm.expect(response.data.humidity).to.equal(12)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"temperature\": 100,\n\t\"co2\": 34,\n\t\"humidity\": 12\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/update/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{data_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE DATA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Expect status 200\", () => {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(\"Expect success message\", () => {",
									"    pm.expect(response.message).to.equal(\"Data deleted\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/delete/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{data_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AUTH",
			"item": [
				{
					"name": "REGISTER ADMIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Expect status 200\", () => {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.globals.set(\"user_id\", response.user._id);",
									"",
									"pm.test(\"Expect user\", () => {",
									"    pm.expect(response.user).to.have.property(\"username\");",
									"    pm.expect(response.user).to.have.property(\"password\");",
									"    pm.expect(response.user).to.have.property(\"_id\");",
									"",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"user_test\",\n\t\"password\": \"123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "LOGIN USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Expect status 200\", () => {",
									"   pm.response.to.have.status(200);",
									"});",
									"const response = pm.response.json();",
									"pm.globals.set(\"token\", response.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"admin\",\n\t\"password\": \"123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "RESET DATA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Expect error\", () => {",
									"   pm.response.to.have.status(500);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(\"Error body: wrong jwt format\", () => {",
									"    pm.expect(response.message).to.equal(\"JSON Web token is invalid. Try Again!\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "wrong token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/reset",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "LOGOUT USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Expect status 200\", () => {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(\"Logged out message\", () => {",
									"    pm.expect(response.message).to.equal(\"Logged out\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Expect status 200\", () => {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(\"User deleted message\", () => {",
									"    pm.expect(response.message).to.equal(\"User deleted\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/user/delete/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"user",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{user_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}